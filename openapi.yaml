openapi: 3.0.0
info:
  version: 1.0.0
  title: Dropshipper API
servers:
  - url: 'http://localhost:3000'
paths:
  /sanctum/csrf-cookie:
    get:
      summary: 'Starts log in process, requesting CSRF token.'
      operationId: getCsrfCookie
      tags:
        - Auth
      responses:
        200:
          description: 'Ok.'
  /api/register:
    post:
      summary: 'Register an user.'
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        description: 'Registration form.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterForm'
      responses:
        200:
          description: 'User registered.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/login:
    post:
      summary: 'Log in'
      operationId: logIn
      tags:
        - Auth
      requestBody:
        description: 'Log in object.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogInForm'
      responses:
        200:
          description: 'Log in successfully.'
        401:
          description: 'Unauthorized.'
  /api/logout:
    delete:
      summary: 'Log out.'
      operationId: logOut
      tags:
        - Auth
      responses:
        200:
          description: 'Log out successfully.'
        401:
          description: 'Unauthorized.'
  /api/me:
    get:
      summary: 'Gets the current user.'
      operationId: getCurrentUser
      tags:
        - User
      responses:
        200:
          description: 'Ok.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/me/sellers:
    get:
      summary: 'Gets the current seller information, if user has a seller account.'
      operationId: getCurrentSeller
      tags:
        - Seller
      responses:
        200:
          description: 'Ok.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        401:
          description: 'Unauthorized.'
  /api/me/sellers/relationships/products:
    get:
      summary: 'Gets the products of the current seller.'
      operationId: getCurrentSellerProducts
      tags:
        - Product
      responses:
        200:
          description: 'Ok.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/sellers:
    post:
      summary: 'Create a seller account for a user.'
      operationId: createSeller
      tags:
        - Seller
      requestBody:
        description: 'Seller object.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerForm'
      responses:
        200:
          description: 'Seller account created and linked to user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        401:
          description: 'Unauthorized.'
  /api/products:
    get:
      summary: 'Gets all the available products.'
      operationId: indexProducts
      tags:
        - Product
      responses:
        200:
          description: 'Ok.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: 'Creates a product.'
      operationId: createProduct
      tags:
        - Product
      requestBody:
        description: 'Product object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        200:
          description: 'Product created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: 'Unauthorized.'
  /api/products/{id}:
    patch:
      summary: 'Updates a specific product.'
      operationId: updateProduct
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: 'Product ID.'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'Product object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        200:
          description: 'Product updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: 'Unauthorized.'
    delete:
      summary: 'Deletes a product.'
      operationId: deleteProduct
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: 'Product ID.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Product deleted.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: 'Unauthorized.'
  /api/sellers/{id}/relationships/products:
    get:
      summary: 'Gets the products from a specific seller.'
      operationId: indexProductBySeller
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: 'Seller ID.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Ok.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/products/search:
    post:
      summary: 'Search for a product.'
      operationId: searchProduct
      tags:
        - Product
      requestBody:
        description: 'Search term.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchForm'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
components:
  schemas:
    RegisterForm:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    SearchForm:
      type: object
      properties:
        search_term:
          type: string
    LogInForm:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ProductForm:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        amount:
          type: integer
          format: int64
        available:
          type: boolean
        min_amount_purchase:
          type: integer
          format: int64
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        amount:
          type: integer
          format: int64
        available:
          type: boolean
        min_amount_purchase:
          type: integer
          format: int64
        seller:
          type: integer
          format: int64
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
    SellerForm:
      type: object
      properties:
        name:
          type: string
        dni:
          type: string
        address:
          type: string
        phone_number:
          type: string
    Seller:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        dni:
          type: string
        address:
          type: string
        phone_number:
          type: string
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
        user:
          type: integer
          format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        seller:
          type: integer
          format: int64
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime